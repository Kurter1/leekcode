question1:
小红可以对一个数进行如下两种操作：将这个数乘以x；或将这个数乘以y。操作的次数是没有限制的。
小红想知道，自己最少经过多少次操作以后，可以把a变成b？

输入描述：
四个正整数x,y,a,b,用空格隔开。
2<=x,y<=100
1<=a,b<=10^9

输出描述：
如果小红无论如何都无法把a变成b，则输出-1.
否则输出小红操作的最少次数。可以证明，如果存在某种操作，那么最少次数一定是固定的。

示例1:
输入：
2 3 5 20
输出：
2
说明：
x=2，y=3，进行两次乘2操作，可以把5变成20.

错误思路： 贪心貌似是对的，实际上如果x，y为倍数关系会导致无法整除，因此遇到除不尽的问题应该回退到前一个状态
int main(){
int a,b,x,y;
int count=0;
cin>>a>>b>>x>>y;
if(b%a!=0)
{
  return -1;
}
else
{
  int c= b/a;
}
if(x<y)
{
  swap(x,y);
}
while(c/x!=0)
{
  ++count;
  c/=x;
}
while(c/y!=0)
{
  ++count;
  c/=y;
}
return count;
}

quetion2:
牛牛对n个城市的旅游情况进行了规划
已知每个城市有两种属性xi和yi，其中xi表示去第i号城市的花费yi表示在第i号城市游玩后会得到的开心值，现在牛牛希望从中挑选出一些城市去游玩，但挑选出的城市必须满足任意两个城市之间花费的
绝对值小于k 他想请你帮他计算出在满足上述条件下能得到的最大开心值是多少。

输入描述：
第一行输入两个正整数n和k
接下来n行，每行输入两个正整数xi和yi，分别表示每个城市的两种属性。
1<=n<=100000
1<=k<=10000000000
0<=xi,yi<=10000000000

输出描述：
输出一个整数表示答案.

示例1:
输入：
5 3
1 3
2 1
5 2
3 1
4 3

输出：
6

说明：
牛牛可以选择去3号，4号，5号城市进行游玩，并收获最大的开心值

代码：
int main(){
int n,k;
cin>>n>>k;
vector<pair<int,int>>city(n);
for(int i=0;i<n;i++)
{
  cin>>city[i].first>>city[i].second;
}
sort(city.begin(),city.end());
int happyMax = -1;
int curHappy = 0;
for(int i=0;i<n-2;i++)
{
  for(int j=0;j<k;j++)
  {
    int temp += city[i+j].second; 
    if(temp>happyMax)
    {
      happyMax = temp;
    }
  }
}
return happyMax;
}



