层次遍历
题目描述：给定一棵n叉树，包括n叉树的数据结构
/*
Definition for a Node
Class Node {
public:
  int val;
  vector<Node*>children;
  
  Node() {}
  
  Node(int val) {
    val = _val;
  }
  
  Node(int _val,vector<Node*> _children) {
    val = _val;
    children = _children;
  }
};
*/

思路：定义一个辅助队列，定义返回值二维数组vector
1.判断根节点是否为空，如果为空，则直接返回空，若不为空，将根节点加入到队列中。
2.判断队列中是否为空，如果为空，则无需对vector赋值，若不为空，则首先获取此时队列中有多少节点，之后首先出队队头元素，获取队头元素有多少子节点，将子节点加到队列末端，将出队元素的元素值添加到
循环中的临时vector中。
3.将一次循环后的vector添加到二维vector中。
4.返回二维数组vector，即为层次遍历的结果。

代码如下：
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        queue<Node*>temp;
        vector<vector<int>>res;
        if(root!=NULL)
        {
            temp.push(root);
        }
        while(!temp.empty())
        {
            vector<int>tes;
            int len=temp.size();
            for(int i=0;i<len;i++)
            {
                Node *node;
                node=temp.front();
                tes.push_back(node->val);
                for(Node* n:node->children)
                {
                    temp.push(n);
                }
                temp.pop();
            }
            res.push_back(tes);
        }
        return res;
    }
};


   
